const gsl = @cImport(@cInclude("gsl/gsl_sf.h"));
const err = @import("errors.zig");

/// Value and error estimate for special function invocation
pub const Result = gsl.gsl_sf_result;
/// Same as Result, but with scaling applied to prevent overflowing
/// Real result is thus val * 10^(e10). Uses smash function to obtain this
/// value.
pub const ResultE10 = gsl.gsl_sf_result_e10;

/// Specifies precision of computation for some special functions, approximately:
/// DOUBLE: 2*10e-16
/// SINGLE: 10e-7
/// APPROX: 5*10e-4
pub const Precision = enum(c_int) { DOUBLE = 0, SINGLE = 1, APPROX = 2 };

/// Converts a scaled result to a normal result. Note that overflow or underflow
/// are not considered errors here, but they will end up in a inf / -inf result
pub fn smash(r: ResultE10) err.OverflowOrUnderflowError!Result {
    var out: Result = undefined;
    const retval = gsl.gsl_sf_result_smash_e(&r, &out);
    switch (retval) {
        gsl.GSL_SUCCESS => return out,
        gsl.GSL_EOVRFLW => return error.Overflow,
        gsl.GSL_EUNDRFLW => return error.Undeflow,
        else => unreachable,
    }
    return out;
}

// Autogenerated headers for all subfunction types
pub const airy = @import("wrapped_sf_airy.zig");
pub const alf = @import("manual/sf/alf.zig");
pub const bessel = @import("wrapped_sf_bessel.zig");
pub const coulomb = @import("wrapped_sf_coulomb.zig");
pub const debye = @import("wrapped_sf_debye.zig");
pub const dilog = @import("wrapped_sf_dilog.zig");
pub const elementary = @import("wrapped_sf_elementary.zig");
pub const ellint = @import("wrapped_sf_ellint.zig");
pub const erf = @import("wrapped_sf_erf.zig");
pub const exp = @import("wrapped_sf_erf.zig");
pub const expint = @import("wrapped_sf_expint.zig");
pub const fermi_dirac = @import("wrapped_sf_fermi_dirac.zig");
pub const gamma = @import("wrapped_sf_gamma.zig");
pub const gegenbauer = @import("wrapped_sf_gegenbauer.zig");
pub const hermite = @import("wrapped_sf_hermite.zig");
pub const laguerre = @import("wrapped_sf_laguerre.zig");
pub const lambert = @import("wrapped_sf_lambert.zig");
pub const log = @import("wrapped_sf_log.zig");
pub const psi = @import("wrapped_sf_psi.zig");
pub const sincos_pi = @import("wrapped_sf_sincos_pi.zig");
pub const transport = @import("wrapped_sf_transport.zig");
pub const trig = @import("wrapped_sf_trig.zig");
pub const zeta = @import("wrapped_sf_zeta.zig");

// Promoted namespaces
const coupling_s = @import("wrapped_sf_coupling.zig");
pub const coupling_3j = coupling_s.coupling_3j;
pub const coupling_3j_e = coupling_s.coupling_3j_e;
pub const coupling_6j = coupling_s.coupling_6j;
pub const coupling_6j_e = coupling_s.coupling_6j_e;
pub const coupling_6j_INCORRECT = coupling_s.coupling_6j_INCORRECT;
pub const coupling_6j_INCORRECT_e = coupling_s.coupling_6j_INCORRECT_e;
pub const coupling_9j = coupling_s.coupling_9j;
pub const coupling_9j_e = coupling_s.coupling_9j_e;
pub const coupling_RacahW = coupling_s.coupling_RacahW;
pub const coupling_RacahW_e = coupling_s.coupling_RacahW_e;

const pow_int_s = @import("wrapped_sf_pow_int.zig");
pub const pow_int = pow_int_s.pow_int;
pub const pow_int_e = pow_int_s.pow_int_e;

const synchrotron_s = @import("wrapped_sf_synchrotron.zig");
pub const synchrotron_1 = synchrotron_s.synchrotron_1;
pub const synchrotron_2 = synchrotron_s.synchrotron_2;
pub const synchrotron_1_e = synchrotron_s.synchrotron_1_e;
pub const synchrotron_2_e = synchrotron_s.synchrotron_2_e;

// elljac
const elljac_s = @import("manual/sf/elljac.zig");

const clausen_s = @import("wrapped_sf_clausen.zig");
pub const clausen = clausen_s.clausen;
pub const clausen_e = clausen_s.clausen_e;

const dawson_s = @import("wrapped_sf_dawson.zig");
pub const dawson = dawson_s.dawson;
pub const dawson_e = dawson_s.dawson_e;

const hyperg_s = @import("wrapped_sf_hyperg.zig");
pub const hyperg_0F1 = hyperg_s.hyperg_0F1;
pub const hyperg_0F1_e = hyperg_s.hyperg_0F1_e;
pub const hyperg_1F1 = hyperg_s.hyperg_1F1;
pub const hyperg_1F1_e = hyperg_s.hyperg_1F1_e;
pub const hyperg_1F1_int = hyperg_s.hyperg_1F1_int;
pub const hyperg_1F1_int_e = hyperg_s.hyperg_1F1_int_e;
pub const hyperg_2F0 = hyperg_s.hyperg_2F0;
pub const hyperg_2F0_e = hyperg_s.hyperg_2F0_e;
pub const hyperg_2F1 = hyperg_s.hyperg_2F1;
pub const hyperg_2F1_e = hyperg_s.hyperg_2F1_e;
pub const hyperg_2F1_conj = hyperg_s.hyperg_2F1_conj;
pub const hyperg_2F1_conj_e = hyperg_s.hyperg_2F1_conj_e;
pub const hyperg_2F1_conj_renorm = hyperg_s.hyperg_2F1_conj_renorm;
pub const hyperg_2F1_conj_renorm_e = hyperg_s.hyperg_2F1_conj_renorm_e;
pub const hyperg_2F1_renorm = hyperg_s.hyperg_2F1_renorm;
pub const hyperg_2F1_renorm_e = hyperg_s.hyperg_2F1_renorm_e;
pub const hyperg_U = hyperg_s.hyperg_U;
pub const hyperg_U_e = hyperg_s.hyperg_U_e;
pub const hyperg_U_e10_e = hyperg_s.hyperg_U_e10_e;
pub const hyperg_U_int = hyperg_s.hyperg_U_int;
pub const hyperg_U_int_e = hyperg_s.hyperg_U_int_e;
pub const hyperg_U_int_e10_e = hyperg_s.hyperg_U_int_e10_e;
